{"version":3,"sources":["VisNetwork.tsx","SolutionVisualizer.tsx","App.tsx","theme.tsx","index.tsx"],"names":["options","DataSet","id","label","from","to","color","highlight","autoResize","height","width","locale","clickToUse","layout","randomSeed","undefined","improvedLayout","hierarchical","enabled","levelSeparation","nodeSpacing","treeSpacing","blockShifting","edgeMinimization","parentCentralization","direction","sortMethod","VisNetwork","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","containerRef","createRef","inherits","createClass","key","value","_this$props","props","nodesCount","edges","path","Network","current","getData","react_default","a","createElement","ref","style","Component","nodes","keys","map","node","toString","edge","weight","Math","abs","indexOf","initialState","isGraphLoaded","isResultLoaded","SolutionVisualizer","_React$Component","state","onGraphLoaded","e","results","reader","FileReader","onload","_parseGraph","parseGraph","result","setState","_results$","slicedToArray","file","readAsText","onResultLoaded","parsePath","_results$2","classes","Fragment","CssBaseline","className","heroContent","Container","maxWidth","Typography","variant","align","gutterBottom","paragraph","heroButtons","Grid","container","spacing","justify","item","lib_default","as","onChange","Button","disabled","cardGrid","Card","card","CardContent","cardContent","VisNetwork_VisNetwork","React","graphText","maxNode","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","split","Symbol","iterator","next","done","edgeData","Number","parseInt","push","err","return","pathText","useStyles","makeStyles","theme","icon","marginRight","backgroundColor","palette","background","paper","padding","marginTop","paddingTop","paddingBottom","display","flexDirection","flexGrow","footer","createMuiTheme","primary","main","secondary","error","red","A400","default","ReactDOM","render","ThemeProvider","SolutionVisualizer_SolutionVisualizer","document","getElementById"],"mappings":"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","file":"static/js/main.6c50a1cb.chunk.js","sourcesContent":["import React, { Component, createRef } from \"react\";\r\nimport {DataSet, Network} from 'vis';\r\nimport {Edge} from './SolutionVisualizer'\r\nimport { node, number } from \"prop-types\";\r\n\r\nvar nodes = new DataSet([\r\n    {id: 1, label: '1'},\r\n    {id: 2, label: '2'},\r\n    {id: 3, label: '3'},\r\n    {id: 4, label: '4'},\r\n    {id: 5, label: '5'}\r\n]);\r\n\r\n// create an array with edges\r\nvar edges = new DataSet([\r\n    {from: 1, to: 3, color: {color: 'red', highlight: 'red'}},\r\n    {from: 1, to: 2},\r\n    {from: 2, to: 4},\r\n    {from: 2, to: 5}\r\n]);\r\n\r\nvar data = {\r\n    nodes: nodes,\r\n    edges: edges\r\n};\r\n\r\nvar options = {\r\n    autoResize: true,\r\n    height: '100%',\r\n    width: '100%',\r\n    locale: 'en',\r\n    clickToUse: false,\r\n    layout: {\r\n        randomSeed: undefined,\r\n        improvedLayout:true,\r\n        hierarchical: {\r\n          enabled:false,\r\n          levelSeparation: 150,\r\n          nodeSpacing: 100,\r\n          treeSpacing: 200,\r\n          blockShifting: true,\r\n          edgeMinimization: true,\r\n          parentCentralization: true,\r\n          direction: 'UD',\r\n          sortMethod: 'hubsize'\r\n        }\r\n      },\r\n  }\r\n\r\ninterface Props {\r\n  edges: Edge[];\r\n  nodesCount: number;\r\n  path: number[];\r\n}\r\n\r\nexport class VisNetwork extends Component<Props>\r\n{\r\n    containerRef = createRef<HTMLDivElement>();\r\n\r\n    componentDidMount(){\r\n      const {nodesCount, edges, path} = this.props;\r\n      var network = new Network(this.containerRef.current!!, getData(nodesCount, edges, path), options);\r\n    }\r\n\r\n    render() {\r\n        return <div ref={this.containerRef} style={{ height: '100%' }}></div>;\r\n    }\r\n};\r\n\r\nconst getData = (nodesCount: number, edges: Edge[], path: number[]) => {\r\n  const nodes = new DataSet(\r\n    Array.from(Array(nodesCount).keys()).map((node: number) => ({\r\n      id: node,\r\n      label: node.toString()\r\n    })\r\n  ))\r\n\r\n  const graphEdges = new DataSet(\r\n    edges.map((edge: Edge) => ({\r\n      from: edge.from,\r\n      to: edge.to,\r\n      label: edge.weight.toString(),\r\n      color: (Math.abs(path.indexOf(edge.from) - path.indexOf(edge.to)) == 1) ? {\r\n        color: 'red',\r\n        highlight: 'red'\r\n      } : undefined\r\n    }))\r\n  )\r\n\r\n  return ({\r\n    nodes: nodes,\r\n    edges: graphEdges\r\n  });\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { VisNetwork } from './VisNetwork';\r\nimport FileReaderInput from 'react-file-reader-input'\r\n\r\nexport interface Edge {\r\n  from: number;\r\n  to: number;\r\n  weight: number;\r\n}\r\n\r\ninterface State {\r\n  isGraphLoaded: boolean;\r\n  isResultLoaded: boolean;\r\n  edges: Edge[];\r\n  nodesCount: number\r\n  path: number[];\r\n}\r\n\r\nconst initialState = {\r\n  isGraphLoaded: false,\r\n  isResultLoaded: false,\r\n  edges: [],\r\n  nodesCount: -1,\r\n  path: []\r\n}\r\n\r\nexport class SolutionVisualizer extends React.Component<{classes: any}, State> {\r\n\r\n  state = initialState;\r\n\r\n  onGraphLoaded = (e: any, results: any) => {\r\n    const reader = new FileReader()\r\n    reader.onload = () => { \r\n        const {edges, nodesCount} = parseGraph(reader.result as string);\r\n        this.setState({\r\n            edges,\r\n            nodesCount,\r\n            isGraphLoaded: true,\r\n            isResultLoaded: false\r\n        })\r\n    }\r\n    const [ex, file]= results[0];\r\n    reader.readAsText(file)\r\n  }\r\n\r\n  onResultLoaded = (e: any, results: any) => {\r\n    const reader = new FileReader()\r\n    reader.onload = () => { \r\n        this.setState({\r\n            path: parsePath(reader.result as string),\r\n            isResultLoaded: true\r\n        })\r\n    }\r\n    const [ex, file]= results[0];\r\n    reader.readAsText(file)\r\n  }\r\n\r\n  render() {\r\n    const {classes} = this.props;\r\n    return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <main>\r\n        <div className={classes.heroContent}>\r\n          <Container maxWidth=\"md\">\r\n            <Typography variant=\"h3\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n              Wizualizacja problemu znajdowania ścieżki Hamiltona\r\n            </Typography>\r\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\r\n              Andżelika Domańska, Bartłomiej Chechliński \r\n            </Typography>\r\n            <div className={classes.heroButtons}>\r\n              <Grid container spacing={2} justify=\"center\">\r\n                <Grid item>\r\n                  <FileReaderInput as=\"text\" onChange={this.onGraphLoaded}>\r\n                    <Button variant=\"contained\" color=\"primary\">\r\n                      Prześlij graf\r\n                    </Button>\r\n                  </FileReaderInput>\r\n                </Grid>\r\n                <Grid item>\r\n                <FileReaderInput as=\"text\" onChange={this.onResultLoaded}>\r\n                  <Button \r\n                    variant=\"outlined\" \r\n                    color=\"primary\" \r\n                    disabled={!this.state.isGraphLoaded}\r\n                  >\r\n                    Prześlij rozwiązanie\r\n                  </Button>\r\n                </FileReaderInput>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          </Container>\r\n        </div>\r\n        <Container className={classes.cardGrid} maxWidth=\"md\">\r\n          <Card className={classes.card}>\r\n            <CardContent className={classes.cardContent}>\r\n                {this.state.isGraphLoaded && this.state.isResultLoaded && this.state.path.length > 0 && (\r\n                    <VisNetwork\r\n                        edges={this.state.edges}\r\n                        nodesCount={this.state.nodesCount}\r\n                        path={this.state.path}\r\n                    />\r\n                )}\r\n            </CardContent>\r\n          </Card>\r\n        </Container>\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n    }\r\n}\r\n\r\ninterface Graph {\r\n    edges: Edge[];\r\n    nodesCount: number;\r\n}\r\n\r\nconst parseGraph = (graphText: string): Graph => {\r\n    const edges: Edge[] = [];\r\n    let maxNode = -1;\r\n\r\n    for (const line of graphText.split(/[\\r\\n]+/)){\r\n        const edgeData = line.split(' ');\r\n        const from = Number.parseInt(edgeData[0]);\r\n        const to = Number.parseInt(edgeData[1]);\r\n\r\n        if (from > maxNode)\r\n            maxNode = from;\r\n        if (to > maxNode)\r\n            maxNode = to;\r\n\r\n        edges.push({\r\n            from,\r\n            to,\r\n            weight: Number.parseInt(edgeData[2])\r\n        })\r\n    }\r\n\r\n    return ({\r\n        edges,\r\n        nodesCount: maxNode + 1 \r\n    })\r\n}\r\n\r\nconst parsePath = (pathText: string) => {\r\n    const path = pathText.split(/[\\r\\n]+/)[0];\r\n    return path.split(' ').map(node => Number.parseInt(node));\r\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { SolutionVisualizer } from './SolutionVisualizer';\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '50rem',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\nexport const App = () => {\n  const classes = useStyles();\n\n  return (\n    <SolutionVisualizer classes={classes}/>\n  );\n}","import red from '@material-ui/core/colors/red';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#556cd6',\r\n    },\r\n    secondary: {\r\n      main: '#19857b',\r\n    },\r\n    error: {\r\n      main: red.A400,\r\n    },\r\n    background: {\r\n      default: '#556cd6',\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/styles';\nimport {App} from './App';\nimport theme from './theme';\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n document.getElementById('root'));\n"],"sourceRoot":""}